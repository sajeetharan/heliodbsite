"use strict";(self.webpackChunkheliodb=self.webpackChunkheliodb||[]).push([[7045],{1361:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=s(4848),o=s(8453);const r={sidebar_position:1},i=void 0,c={id:"get-started/Running HelioDB on Docker",title:"Running HelioDB on Docker",description:"Get Started",source:"@site/docs/get-started/Running HelioDB on Docker.md",sourceDirName:"get-started",slug:"/get-started/Running HelioDB on Docker",permalink:"/heliodbsite/docs/get-started/Running HelioDB on Docker",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/get-started/Running HelioDB on Docker.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Get-Started",permalink:"/heliodbsite/docs/category/get-started"},next:{title:"Install HelioDB locally",permalink:"/heliodbsite/docs/get-started/Install HelioDB locally"}},a={},l=[{value:"Get Started",id:"get-started",level:2},{value:"Running HelioDB on Docker",id:"running-heliodb-on-docker",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"get-started",children:"Get Started"}),"\n",(0,t.jsxs)(n.p,{children:["Before you can run a HelioDB within Docker container, you must install ",(0,t.jsx)(n.a,{href:"https://docs.docker.com/engine/install/",children:"Docker"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"running-heliodb-on-docker",children:"Running HelioDB on Docker"}),"\n",(0,t.jsx)(n.p,{children:"Step 1: Clone the HelioDB repo."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/microsoft/heliodb.git\n"})}),"\n",(0,t.jsx)(n.p,{children:"Step 2: Create the docker image. Navigate to cloned repo."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker build . -f .devcontainer/Dockerfile -t heliodb \n"})}),"\n",(0,t.jsxs)(n.p,{children:["Note: Validate using ",(0,t.jsx)(n.code,{children:"docker image ls"})]}),"\n",(0,t.jsx)(n.p,{children:"Step 3: Run the Image as a container"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker run -v $(pwd):/home/heliodb/code -it heliodb /bin/bash \n\ncd code\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Note: Validate container is running ",(0,t.jsx)(n.code,{children:"docker container ls"})]}),"\n",(0,t.jsx)(n.p,{children:"Step 4: Build & Deploy the binaries"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make \n"})}),"\n",(0,t.jsxs)(n.p,{children:["Note: Run in case of in unsuccessful build ",(0,t.jsx)(n.code,{children:"git config --global --add safe.directory /home/heliodb/code"})," within image"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo make install\n"})}),"\n",(0,t.jsx)(n.p,{children:"Step 5: Initiate Postgres service on docker image"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo service postgresql start\n"})}),"\n",(0,t.jsx)(n.p,{children:"Step 6: Connect to PostgreSQL deployment using psql"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo -u postgres psql\n"})}),"\n",(0,t.jsx)(n.p,{children:"Step 7: Install additional pre-required extensions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"ALTER SYSTEM set shared_preload_libraries to pg_cron, pg_helio_core, pg_helio_api;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Exit the Postgres shell, Restart the Postgres service & connect back to the Postgres shell."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo service postgresql restart\n\nsudo -u postgres psql\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Create required extensions ",(0,t.jsx)(n.a,{href:"https://github.com/citusdata/pg_cron",children:"pg_cron"}),", ",(0,t.jsx)(n.a,{href:"https://github.com/postgis/postgis",children:"postgis"}),", ",(0,t.jsx)(n.a,{href:"https://github.com/postgrespro/rum",children:"rum"}),", ",(0,t.jsx)(n.a,{href:"https://github.com/pgvector/pgvector",children:"pg_vector"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"create extension pg_cron;\ncreate extension postgis;\ncreate extension tsm_system_rows;\ncreate extension rum;\ncreate extension vector;\ncreate extension pg_helio_core;\ncreate extension pg_helio_api;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Step 8: Validate your deployment."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'SET helio_core.bsonUseEJson TO true;\n\n-- Review for extensions installed in Step 7 \nSELECT extname from pg_extension;\n\nSET search_path = "$user", public, helio_core, helio_api, helio_catalog;\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var t=s(6540);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);