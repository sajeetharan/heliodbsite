"use strict";(self.webpackChunkheliodb=self.webpackChunkheliodb||[]).push([[985],{2285:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>r});var t=i(4848),o=i(8453);const a={sidebar_position:3},d=void 0,s={id:"get-started/Usage",title:"Usage",description:"Usage",source:"@site/docs/get-started/Usage.md",sourceDirName:"get-started",slug:"/get-started/Usage",permalink:"/heliodbsite/docs/get-started/Usage",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/get-started/Usage.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Install HelioDB locally",permalink:"/heliodbsite/docs/get-started/Install HelioDB locally"},next:{title:"Commmunity",permalink:"/heliodbsite/docs/get-started/community"}},l={},r=[{value:"Usage",id:"usage",level:2},{value:"Create a collection",id:"create-a-collection",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Perform CRUD operations",id:"perform-crud-operations",level:3},{value:"Insert documents",id:"insert-documents",level:4},{value:"Parameters",id:"parameters-1",level:5},{value:"Read document from a collection",id:"read-document-from-a-collection",level:4},{value:"Update document in a collection",id:"update-document-in-a-collection",level:4},{value:"Parameters",id:"parameters-2",level:5},{value:"Delete document from the collection",id:"delete-document-from-the-collection",level:4},{value:"Parameters",id:"parameters-3",level:5},{value:"Perform aggregations <code>Group by</code>",id:"perform-aggregations-group-by",level:3},{value:"Join data from multiple collections",id:"join-data-from-multiple-collections",level:3},{value:"Collection management",id:"collection-management",level:3},{value:"Indexing",id:"indexing",level:3},{value:"Create an Index",id:"create-an-index",level:4},{value:"Drop an Index",id:"drop-an-index",level:4}];function c(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(n.p,{children:["Once you have your ",(0,t.jsx)(n.code,{children:"HelioDB"})," set up running, you can start with creating collections, indexes and perform queries on them."]}),"\n",(0,t.jsx)(n.h3,{id:"create-a-collection",children:"Create a collection"}),"\n",(0,t.jsxs)(n.p,{children:["HelioDB provides ",(0,t.jsx)(n.code,{children:"helio_api.create_collection"})," function to create a new collection within a specified database, enabling you to manage and organize your BSON documents effectively."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT helio_api.create_collection('Heliodatabase','patient');\n"})}),"\n",(0,t.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"Heliodatabase"})})}),(0,t.jsx)(n.td,{children:"The name of the database where the collection will be created."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"first_collection"})})}),(0,t.jsx)(n.td,{children:"The name of the collection to be created."})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"perform-crud-operations",children:"Perform CRUD operations"}),"\n",(0,t.jsx)(n.h4,{id:"insert-documents",children:"Insert documents"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"insertOne()"})," command is used to add a single document into a collection."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'select 1 from helio_api.insert_one(\'Heliodatabase\',\'patient\', \'{ "patient_id": "P001", "name": "Alice Smith", "age": 30, "phone_number": "555-0123", "registration_year": "2022","conditions": ["Diabetes", "Hypertension"]}\');\nselect 1 from helio_api.insert_one(\'Heliodatabase\',\'patient\', \'{ "patient_id": "P002", "name": "Bob Johnson", "age": 45, "phone_number": "555-0456", "registration_year": "2022", "conditions": ["Asthma"]}\');\nselect 1 from helio_api.insert_one(\'Heliodatabase\',\'patient\', \'{ "patient_id": "P003", "name": "Charlie Brown", "age": 29, "phone_number": "555-0789", "registration_year": "2023", "conditions": ["Allergy", "Anemia"]}\');\nselect 1 from helio_api.insert_one(\'Heliodatabase\',\'patient\', \'{ "patient_id": "P004", "name": "Diana Prince", "age": 40, "phone_number": "555-0987", "registration_year": "2023", "conditions": ["Migraine"]}\');\nselect 1 from helio_api.insert_one(\'Heliodatabase\',\'patient\', \'{ "patient_id": "P005", "name": "Edward Norton", "age": 55, "phone_number": "555-1111", "registration_year": "2024", "conditions": ["Hypertension", "Heart Disease"]}\');\n'})}),"\n",(0,t.jsx)(n.h5,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"Heliodatabase"})})}),(0,t.jsx)(n.td,{children:"The name of the database where the collection exists."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"patient"})})}),(0,t.jsx)(n.td,{children:"The name of the collection where data is inserted."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsxs)(n.strong,{children:["'","'"]})}),(0,t.jsx)(n.td,{children:"Provide the valid json document to be inserted."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"read-document-from-a-collection",children:"Read document from a collection"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"helio_api.collection"})," function is used for retrieving the documents in a collection."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT document FROM helio_api.collection('Heliodatabase','patient');\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Alternatively, we can apply filter for specific condition using ",(0,t.jsx)(n.code,{children:"@@"})," or ",(0,t.jsx)(n.code,{children:"@="})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SET search_path TO helio_api, helio_api_catalog,helio_core;\nSET helio_core.bsonUseEJson TO true;\n\nSELECT document FROM helio_api.collection('Heliodatabase','patient') WHERE document @@ '{\"patient_id\":\"P005\"}';\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Similarly, we can also query for range using ",(0,t.jsx)(n.code,{children:"@>"})," and ",(0,t.jsx)(n.code,{children:"@<"})," operators."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT document FROM helio_api.collection('Heliodatabase','patient') WHERE document @> '{\"age\":10}' and document @< '{\"age\":35}';\n"})}),"\n",(0,t.jsx)(n.h4,{id:"update-document-in-a-collection",children:"Update document in a collection"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"HelioDB"})," uses the ",(0,t.jsx)(n.code,{children:"helio_api.update"})," function to modify existing documents within a collection."]}),"\n",(0,t.jsxs)(n.p,{children:["The SQL command updates the ",(0,t.jsx)(n.code,{children:"age"})," for patient ",(0,t.jsx)(n.code,{children:"P004"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'select helio_api.update(\'Heliodatabase\', \'{"update":"patient", "updates":[{"q":{"patient_id":"P004"},"u":{"$set":{"age":14}}}]}\');\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Similarly, we can update multiple documents using ",(0,t.jsx)(n.code,{children:"multi"})," property."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'SELECT helio_api.update(\'Heliodatabase\', \'{"update":"patient", "updates":[{"q":{},"u":{"$set":{"age":50}},"multi":true}]}\');\n'})}),"\n",(0,t.jsx)(n.h5,{id:"parameters-2",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"Heliodatabase"})})}),(0,t.jsx)(n.td,{children:"The name of the database where the collection exists."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"update"})})}),(0,t.jsx)(n.td,{children:"The name of the collection which contains the document to be updated."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"updates"})})}),(0,t.jsx)(n.td,{children:"The operation to be performed on collection."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"q: {}"})})}),(0,t.jsxs)(n.td,{children:["The query to qualify records for operation. An empty object "," matches all documents in the collection."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"u"})})}),(0,t.jsx)(n.td,{children:"This defines the update operation to perform."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"multi"})})}),(0,t.jsx)(n.td,{children:"Indicates that the update is applied to single or multiple matching documents."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"delete-document-from-the-collection",children:"Delete document from the collection"}),"\n",(0,t.jsxs)(n.p,{children:["HelioDB uses the ",(0,t.jsx)(n.code,{children:"helio_api.delete"})," function for precise document removal based on specified criteria."]}),"\n",(0,t.jsxs)(n.p,{children:["The SQL command deletes the document for patient ",(0,t.jsx)(n.code,{children:"P002"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'SELECT helio_api.delete(\'Heliodatabase\', \'{"delete": "patient", "deletes": [{"q": {"patient_id": "P002"}, "limit": 1}]}\');\n'})}),"\n",(0,t.jsx)(n.h5,{id:"parameters-3",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"Heliodatabase"})})}),(0,t.jsx)(n.td,{children:"The name of the database where the collection exists."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"delete"})})}),(0,t.jsx)(n.td,{children:"The name of the collection to perform the deletion from."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"deletes"})})}),(0,t.jsx)(n.td,{children:"The operation to be performed on collection."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"q: {}"})})}),(0,t.jsxs)(n.td,{children:["The query to qualify records for operation. An empty object "," matches all documents in the collection."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"limit"})})}),(0,t.jsxs)(n.td,{children:["Enables control towards the removal of matching documents. It could either be ",(0,t.jsx)(n.code,{children:"0"})," for removing all documents Or ",(0,t.jsx)(n.code,{children:"1"})," for removing single record"]})]})]})]}),"\n",(0,t.jsxs)(n.h3,{id:"perform-aggregations-group-by",children:["Perform aggregations ",(0,t.jsx)(n.code,{children:"Group by"})]}),"\n",(0,t.jsxs)(n.p,{children:["HelioDb provides the ",(0,t.jsx)(n.code,{children:"helio_api_catalog.bson_aggregation_pipeline"})," function, for performing aggregations over the document store."]}),"\n",(0,t.jsx)(n.p,{children:"The example projects an aggregation on number of patients registered over the years."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'SELECT document FROM helio_api_catalog.bson_aggregation_pipeline(\'Heliodatabase\', \'{ "aggregate": "patient", "pipeline": [ { "$group": { "_id": "$registration_year", "count_patients": { "$count": {} } } } ] }\');\n'})}),"\n",(0,t.jsxs)(n.p,{children:["We can perform more complex operations like ",(0,t.jsx)(n.code,{children:"$bucket"}),", ",(0,t.jsx)(n.code,{children:"$addtoSet"}),", ",(0,t.jsx)(n.code,{children:"$facet"}),", ",(0,t.jsx)(n.code,{children:"geoNear"}),", ",(0,t.jsx)(n.code,{children:"$graphLookup"}),", ",(0,t.jsx)(n.code,{children:"inverseMatch"}),", ",(0,t.jsx)(n.code,{children:"mergeObjects"})," using the pipeline. Adding a couple of more usage examples.\nThe example demonstrates an aggregation on patients, categorizing them into buckets defined by registration_year boundaries."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'SELECT document FROM bson_aggregation_pipeline(\'Heliodatabase\', \'{ "aggregate": "patient", "pipeline": [ { "$bucket": { "groupBy": "$registration_year", "boundaries": ["2021","2023","2025"], "default": "unknown" } } ] }\');\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This query performs an aggregation on the ",(0,t.jsx)(n.code,{children:"patient"})," collection to group documents by ",(0,t.jsx)(n.code,{children:"registration_year"}),". It collects unique patient conditions for each registration year using the ",(0,t.jsx)(n.code,{children:"$addToSet"})," operator."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'SELECT document FROM helio_api_catalog.bson_aggregation_pipeline(\'Heliodatabase\', \'{ "aggregate": "patient", "pipeline": [ { "$group": { "_id": "$registration_year", "conditions": { "$addToSet": { "conditions" : "$conditions" } } } } ] }\');\n'})}),"\n",(0,t.jsx)(n.h3,{id:"join-data-from-multiple-collections",children:"Join data from multiple collections"}),"\n",(0,t.jsxs)(n.p,{children:["Let's create an additional collection named ",(0,t.jsx)(n.code,{children:"appointment"})," to demonstrate how a join operation can be performed."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'select 1 from helio_api.insert_one(\'Heliodatabase\',\'appointment\', \'{"appointment_id": "A001", "patient_id": "P001", "doctor_name": "Dr. Milind", "appointment_date": "2023-01-20", "reason": "Routine checkup" }\');\nselect 1 from helio_api.insert_one(\'Heliodatabase\',\'appointment\', \'{"appointment_id": "A002", "patient_id": "P001", "doctor_name": "Dr. Moore", "appointment_date": "2023-02-10", "reason": "Follow-up"}\');\nselect 1 from helio_api.insert_one(\'Heliodatabase\',\'appointment\', \'{"appointment_id": "A004", "patient_id": "P003", "doctor_name": "Dr. Smith", "appointment_date": "2023-03-12", "reason": "Allergy consultation"}\');\nselect 1 from helio_api.insert_one(\'Heliodatabase\',\'appointment\', \'{"appointment_id": "A005", "patient_id": "P004", "doctor_name": "Dr. Moore", "appointment_date": "2023-04-15", "reason": "Migraine treatment"}\');\nselect 1 from helio_api.insert_one(\'Heliodatabase\',\'appointment\', \'{"appointment_id": "A007","patient_id": "P001", "doctor_name": "Dr. Milind", "appointment_date": "2023-06-05", "reason": "Blood test"}\');\nselect 1 from helio_api.insert_one(\'Heliodatabase\',\'appointment\', \'{ "appointment_id": "A009", "patient_id": "P003", "doctor_name": "Dr. Smith","appointment_date": "2023-06-25", "reason": "Follow-up visit"}\');\n'})}),"\n",(0,t.jsx)(n.p,{children:"The example presents each patient along with the doctors visited."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'SELECT document FROM helio_api_catalog.bson_aggregation_pipeline(\'Heliodatabase\', \'{ "aggregate": "patient", "pipeline": [ { "$lookup": { "from": "appointment","localField": "patient_id", "foreignField": "patient_id", "as": "appointment" } },{"$unwind":"$appointment"},{"$project":{"_id":0,"name":1,"appointment.doctor_name":1,"appointment.appointment_date":1}} ]}\');\n'})}),"\n",(0,t.jsx)(n.h3,{id:"collection-management",children:"Collection management"}),"\n",(0,t.jsxs)(n.p,{children:["We can review for the available collections and databases by querying ",(0,t.jsx)(n.code,{children:"helio_api_catalog.collections"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM helio_api_catalog.collections;\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"helio_api_catalog.collection_indexes"})," allows reviewing for the existing indexes on a collection. We can find collection_id from ",(0,t.jsx)(n.code,{children:"helio_api_catalog.collections"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM helio_api_catalog.collection_indexes WHERE collection_id = 2;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["ttl indexes by default gets scheduled through the ",(0,t.jsx)(n.code,{children:"pg_cron"})," scheduler, which could be reviewed by querying the ",(0,t.jsx)(n.code,{children:"cron.job"})," table."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select * from cron.job;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"indexing",children:"Indexing"}),"\n",(0,t.jsx)(n.h4,{id:"create-an-index",children:"Create an Index"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"HelioDB"})," uses the ",(0,t.jsx)(n.code,{children:"helio_api.create_indexes_background"})," function, which allows background index creation without disrupting database operations."]}),"\n",(0,t.jsxs)(n.p,{children:["The SQL command demonstrates how to create a ",(0,t.jsx)(n.code,{children:"single"})," index on fields age on the ",(0,t.jsx)(n.code,{children:"patient"})," collection of the ",(0,t.jsx)(n.code,{children:"Heliodatabase"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'SELECT * FROM helio_api.create_indexes_background(\'Heliodatabase\', \'{ "createIndexes": "patient", "indexes": [{ "key": {"age": 1},"name": "idx_age"}]}\');\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The SQL command demonstrates how to create a ",(0,t.jsx)(n.code,{children:"compound"})," index on fields age on the ",(0,t.jsx)(n.code,{children:"patient"})," collection of the ",(0,t.jsx)(n.code,{children:"Heliodatabase"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'SELECT * FROM helio_api.create_indexes_background(\'Heliodatabase\', \'{ "createIndexes": "patient", "indexes": [{ "key": {"registration_year": 1, "age": 1},"name": "idx_regyr_age"}]}\');\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The SQL command demonstrates how to create a ",(0,t.jsx)(n.code,{children:"ttl"})," index on fields age on the ",(0,t.jsx)(n.code,{children:"patient"})," collection of the ",(0,t.jsx)(n.code,{children:"Heliodatabase"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'CALL helio_api.create_indexes(\'db\', \'{"createIndexes": "appointment", "indexes": [{"appointment_date": {"ttl": 1}, "name": "appt_ttl_idx", "v" : 1, "expireAfterSeconds": 50}]}\');\n'})}),"\n",(0,t.jsx)(n.h4,{id:"drop-an-index",children:"Drop an Index"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"HelioDB"})," uses the ",(0,t.jsx)(n.code,{children:"helio_api.drop_indexes"})," function, which allows you to remove an existing index from a collection. The SQL command demonstrates how to drop the index named ",(0,t.jsx)(n.code,{children:"id_ab_1"})," from the ",(0,t.jsx)(n.code,{children:"first_collection"})," collection of the ",(0,t.jsx)(n.code,{children:"Heliodatabase"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'CALL helio_api.drop_indexes(\'Heliodatabase\', \'{"dropIndexes": "patient", "index":"idx_age"}\');\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>s});var t=i(6540);const o={},a=t.createContext(o);function d(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);